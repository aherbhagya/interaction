[
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Item", 
  "modified": "2016-04-05 15:13:05.527656", 
  "name": "item-Client", 
  "script": "frappe.provide(\"erpnext.item\");\r\n\r\nfrappe.ui.form.on(\"Item\", {\r\n\trefresh: function(frm) {\r\n\t\tif (frm.doc.has_variants) {\r\n\t\t\tfrm.add_custom_button(__(\"Make New Item Code\"), function() {\r\n\t\t\t\terpnext.item.make_variant_custom()\r\n\t\t\t}, \"icon-list\", \"btn-default\");\r\n\t\t}\r\n\t},\r\n});\r\n\r\n$.extend(erpnext.item, {\r\n\tget_hidden_fields: function(){\r\n\t\tvar ret = {}, cur_attrs = [];\r\n\t\tcur_frm.doc.attributes.forEach(function(d){\r\n\t\t\tcur_attrs.push(d.attribute);\r\n\t\t});\r\n\t\tfrappe.call({\r\n\t\t\t'async': false,\r\n\t\t\t'method': 'frappe.client.get_list',\r\n\t\t\t'args': {\r\n\t\t\t\t'doctype': 'Item Attribute',\r\n\t\t\t\t'filters': [\r\n\t\t\t\t    ['Item Attribute', 'hidden', '=', 1],\r\n\t\t\t\t\t['Item Attribute', 'name', 'in', cur_attrs]\r\n\t\t\t\t],\r\n\t\t\t\tfields: [\r\n\t\t\t\t\t'name', 'update_from', 'source', 'relation'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t'callback': function(res){\r\n\t\t\t\t(res.message || []).forEach(function(r){\r\n\t\t\t\t\tvar only_allowed, options = [] ;\r\n\t\t\t\t\tif (!ret.hasOwnProperty(r.update_from)){\r\n\t\t\t\t\t\tret[r.update_from] = {};\r\n\t\t\t\t\t\tret[r.update_from]['source'] = r.source;\r\n\t\t\t\t\t\tret[r.update_from]['options'] = {}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tret[r.update_from][r.name] = r.relation;\r\n\t\t\t\t\tret[r.name] = r.update_from;\r\n\t\t\t\t\tonly_allowed = frappe.utils.filter_dict(cur_frm.doc.item_variant_restrictions, {\"attribute\": r.name});\r\n\t\t\t\t\t(only_allowed || []).forEach(function(d){\r\n\t\t\t\t\t\toptions.push(d.attribute)\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (!options.length){\r\n\t\t\t\t\t\tfrappe.call({\r\n\t\t\t\t\t\t\t'async': false,\r\n\t\t\t\t\t\t\t'method': 'frappe.client.get_list',\r\n\t\t\t\t\t\t\t'args': {\r\n\t\t\t\t\t\t\t\t'doctype': 'Item Attribute Value',\r\n\t\t\t\t\t\t\t\t'filters': [\r\n\t\t\t\t\t\t\t\t\t['Item Attribute Value', 'parent', '=', r.name]\r\n\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t'fields': ['attribute_value'],\r\n\t\t\t\t\t\t\t\t'limit_page_length': 500\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t'callback': function(res){\r\n\t\t\t\t\t\t\t\t(res.message || []).forEach(function(r){\r\n\t\t\t\t\t\t\t\t\toptions.push(r.attribute_value);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tret[r.update_from]['options'][r.name] = options;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn ret;\r\n\t},\r\n\tget_conversion_factors: function(from_uom, to_uom){\r\n\t\tvar ret;\r\n\t\tfrappe.call({\r\n\t\t\t'async': false,\r\n\t\t\t'method': 'rigpl_erpnext.rigpl_erpnext.item.get_uom_factors',\r\n\t\t\t'args':{\r\n\t\t\t\t'from_uom': from_uom,\r\n\t\t\t\t'to_uom': to_uom\r\n\t\t\t},\r\n\t\t\t'callback': function(res){\r\n\t\t\t\tret = res.message;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn ret;\r\n\t},\r\n\tmake_variant_custom: function(doc) {\r\n\t\tvar fields = [], hidden_fields = this.get_hidden_fields(doc);\r\n\t\tfor(var i=0;i< cur_frm.doc.attributes.length;i++){\r\n\t\t\tvar row = cur_frm.doc.attributes[i],\r\n\t\t\t    field, creator;\r\n\t\t\tif (!hidden_fields.hasOwnProperty(row.attribute)){\r\n\t\t\t\tfield = {\r\n\t\t\t\t\t\"label\": (row.attribute + \" (\"+ row.field_name + \")\"),\r\n\t\t\t\t\t\"fieldname\": row.attribute,\r\n\t\t\t\t\t\"reqd\": 1,\r\n\t\t\t\t\t\"fieldtype\": row.numeric_values ? \"Float\": \"Select\",\r\n\t\t\t\t\t\"description\": row.numeric_values ?  \"Min Value: \"+ row.from_range +\" , Max Value: \"+ row.to_range +\", in Increments of: \"+ row.increment : \"\"\r\n\t\t\t\t}\r\n\t\t\t\tif (field.fieldtype==='Select') {\r\n\t\t\t\t\tvar filters = [\r\n\t\t\t\t\t\t\t['parent', '=', row.attribute],\r\n\t\t\t\t\t], allowed = [], options = [null];\r\n\t\t\t\t\tfrappe.utils.filter_dict(cur_frm.doc.item_variant_restrictions, {'attribute': row.attribute}).forEach(function(d){\r\n\t\t\t\t\t\tif (d.allowed_values) allowed.push(d.allowed_values);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (allowed.length){\r\n\t\t\t\t\t\toptions = options.concat(allowed);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfrappe.call({\r\n\t\t\t\t\t\t\t'method': 'frappe.client.get_list',\r\n\t\t\t\t\t\t\t'async': false,\r\n\t\t\t\t\t\t\t'args': {\r\n\t\t\t\t\t\t\t\t'doctype': 'Item Attribute Value',\r\n\t\t\t\t\t\t\t\t'filters': filters,\r\n\t\t\t\t\t\t\t\t'fields': ['attribute_value']\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t'callback': function(res){\r\n\t\t\t\t\t\t\t\tres.message.forEach(function(d){\r\n\t\t\t\t\t\t\t\t\toptions.push(d.attribute_value);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfield.options = options;\r\n\t\t\t\t\tfields.push(field)\r\n\t\t\t\t}\r\n\t\t\t} else if (!hidden_fields[hidden_fields[row.attribute]].created){\r\n\t\t\t\tcreator = hidden_fields[row.attribute];\r\n\t\t\t\tfield = {\r\n\t\t\t\t\t'label': (creator + \" (\"+ row.field_name + \")\"),\r\n\t\t\t\t\t'fieldname': creator,\r\n\t\t\t\t\t'reqd': 1,\r\n\t\t\t\t\t'fieldtype': 'Data',\r\n\t\t\t\t};\r\n\t\t\t\thidden_fields[creator].created = true;\r\n\t\t\t\tfields.push(field)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar d = new frappe.ui.Dialog({\r\n\t\t\ttitle: __(\"Make Variant Custom\"),\r\n\t\t\tfields: fields\r\n\t\t});\r\n\t\t\r\n\t\tObject.keys(d.fields_dict).forEach(function(fieldname){\r\n\t\t\tif (d.fields_dict[fieldname].df.fieldtype!=='Data') return;\r\n\t\t\t\r\n\t\t\tvar field = d.fields_dict[fieldname],\r\n\t\t\t\ttarget = field.$input.parent(),\r\n\t\t\t    options = $('<ul class=\"dropdown-menu\"></ul>');\r\n\t\t\t\r\n\t\t\tObject.keys(hidden_fields[fieldname]).forEach(function(key){\r\n\t\t\t\tif (in_list(['created', 'source', 'options'], key)) return;\r\n\t\t\t\t\r\n\t\t\t\tvar option = $(format('<li><a data-option=\"{0}\">{0}</a></li>', [hidden_fields[fieldname][key]]));\r\n\t\t\t\toption.find('a').on('click', function(evt){\r\n\t\t\t\t\tevt.preventDefault();\r\n\t\t\t\t\tvar text = options.parent().find('button').text();\r\n\t\t\t\t\tif (text === $(this).text()) return;\r\n\t\t\t\t\toptions.parent().find('button').text($(this).text());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (target.hasClass('ui-front')){\r\n\t\t\t\t\t\tfield.$input.autocomplete('destroy');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttarget.addClass('ui-front');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((hidden_fields[fieldname].options[key]||'').length){\r\n\t\t\t\t\t\tfield.$input.autocomplete({\r\n\t\t\t\t\t\t\tminChars: 0,\r\n\t\t\t\t\t\t\tminLength: 0,\r\n\t\t\t\t\t\t\tsource: hidden_fields[fieldname].options[key],\r\n\t\t\t\t\t\t\tselect: function(event, ui){\r\n\t\t\t\t\t\t\t\tfield.$input.val(ui.item.value);\r\n\t\t\t\t\t\t\t\tfield.$input.trigger('change');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\toptions.append(option);\r\n\t\t\t});\r\n\t\t\t\t\r\n\t\t\t$(format('<div class=\"input-group-btn\">\\\r\n\t\t\t\t <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" data-fieldname=\"{1}\" aria-expanded=\"false\">{0}<span class=\"caret\"></span></button>\\\r\n\t\t\t  </div>', __([hidden_fields[fieldname].source, fieldname]))).append(options).prependTo(target);\r\n\t\t\t\r\n\t\t\ttarget.addClass('input-group');\r\n\t\t\t\r\n\t\t\tfield.$input.on('change', function(evt){\r\n\t\t\t\tif (!field.$input.val().length) return;\r\n\t\t\t\tvar uom = options.parent().find('button').text();\r\n\t\t\t\tif (uom===hidden_fields[fieldname].source){\r\n\t\t\t\t\tfield.$input.val(\"\");\r\n\t\t\t\t\tfrappe.throw(format('Select the \"{0}\" of the field \"{1}\"\", first!', [hidden_fields[fieldname].source, fieldname]))\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\td.set_primary_action(__(\"Make\"), function() {\r\n\t\t\tvar rules = {},\r\n\t\t\targs = d.get_values();\r\n\t\t\tif(!args) return;\r\n\t\t\t\r\n\t\t\tfrappe.utils.filter_dict(cur_frm.doc.item_variant_restrictions, {'is_numeric': 1}).forEach(function(d){\r\n\t\t\t\tif (!rules.hasOwnProperty(d.attribute)) rules[d.attribute] = [];\r\n\t\t\t\trules[d.attribute].push(d.rule);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tObject.keys(args).filter(function(key){ return hidden_fields.hasOwnProperty(key); }).forEach(function(key){\r\n\t\t\t\tvar val = args[key], base, targets = Object.keys(hidden_fields[key]).filter(function(k){ return !in_list(['created', 'source', 'options'], k)});\r\n\t\t\t\ttry {\r\n\t\t\t\t\tbase = eval(val);\r\n\t\t\t\t} catch( e ){\r\n\t\t\t\t\tfrappe.throw(format('Failed to decode the value \"{0}\"', [val]));\r\n\t\t\t\t}\r\n\t\t\t\ttargets.forEach(function(tgt){\r\n\t\t\t\t\tvar uom = d.fields_dict[key].$input.parent().find('button').text(),\r\n\t\t\t\t\t\ttgt_uom = hidden_fields[key][tgt],\r\n\t\t\t\t\t    factors = erpnext.item.get_conversion_factors(uom, tgt_uom);\r\n\t\t\t\t\tif (uom === tgt_uom) {\r\n\t\t\t\t\t\targs[tgt] = val.indexOf('/') === -1 ? flt(val) : val;\r\n\t\t\t\t\t} else if (factors.rgt){\r\n\t\t\t\t\t\targs[tgt] = flt((base * factors.rgt).toFixed(frappe.defaults.get_global_default('float_precision')));\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t    delete args[key];\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconsole.table(Object.keys(args).map(function(k){ return {'key': k, 'value': args[k]}}));\r\n\t\t\t//debugger;\r\n\t\t\tObject.keys(args).forEach(function(attribute){\r\n\t\t\t\tif (!rules.hasOwnProperty(attribute)) return;\r\n\t\t\t\tvar msg = [];\r\n\t\t\t\tfor (var i=0, j=rules[attribute].length; i < j; i++){\r\n\t\t\t\t\twith (args){\r\n\t\t\t\t\t\tout = eval(rules[attribute][i]);\r\n\t\t\t\t\t\tif (!out){\r\n\t\t\t\t\t\t\tmsg.push(format('Unable for ensure the rule \"{1}\" for the field \"{0}\"', [attribute, rules[attribute][i]]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (msg.length){\r\n\t\t\t\t\tfrappe.throw(msg.join('<br>'))\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tObject.keys(args).forEach(function(attribute){ args[attribute] = args[attribute] + '';});\r\n\t\t\tfrappe.call({\r\n\t\t\t\tmethod:\"erpnext.controllers.item_variant.get_variant\",\r\n\t\t\t\targs: {\r\n\t\t\t\t\t\"template\": cur_frm.doc.name,\r\n\t\t\t\t\t\"args\": args\r\n\t\t\t\t},\r\n\t\t\t\tcallback: function(r) {\r\n\t\t\t\t\t// returns variant item\r\n\t\t\t\t\tif (r.message) {\r\n\t\t\t\t\t\tvar variant = r.message;\r\n\t\t\t\t\t\tvar msgprint_dialog = frappe.msgprint(__(\"Item Variant {0} already exists with same attributes\",\r\n\t\t\t\t\t\t\t[repl('<a href=\"#Form/Item/%(item_encoded)s\" class=\"strong variant-click\">%(item)s</a>', {\r\n\t\t\t\t\t\t\t\titem_encoded: encodeURIComponent(variant),\r\n\t\t\t\t\t\t\t\titem: variant\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t));\r\n\t\t\t\t\t\tmsgprint_dialog.hide_on_page_refresh = true;\r\n\t\t\t\t\t\tmsgprint_dialog.$wrapper.find(\".variant-click\").on(\"click\", function() {\r\n\t\t\t\t\t\t\td.hide();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\td.hide();\r\n\t\t\t\t\t\tfrappe.call({\r\n\t\t\t\t\t\t\tmethod:\"erpnext.controllers.item_variant.create_variant\",\r\n\t\t\t\t\t\t\targs: {\r\n\t\t\t\t\t\t\t\t\"item\": cur_frm.doc.name,\r\n\t\t\t\t\t\t\t\t\"args\": args\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tcallback: function(r) {\r\n\t\t\t\t\t\t\t\tvar doclist = frappe.model.sync(r.message);\r\n\t\t\t\t\t\t\t\tfrappe.set_route(\"Form\", doclist[0].doctype, doclist[0].name);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\td.show();\r\n\t},\r\n\ttoggle_attributes: function(frm) {\r\n\t\tfrm.toggle_display(\"attributes\", frm.doc.has_variants || frm.doc.variant_of);\r\n\t\tfrm.fields_dict.attributes.grid.toggle_reqd(\"attribute_value\", frm.doc.variant_of ? 1 : 0);\r\n\t\tfrm.fields_dict.attributes.grid.set_column_disp(\"attribute_value\", frm.doc.variant_of ? 1 : 0);\r\n\t}\r\n});\r\n\r\ncur_frm.cscript.custom_onload = function () {\r\n\tif (cur_frm.doc.has_variants == 1) {\r\n\t\tcur_frm.set_query('attribute', 'attributes', function(){\r\n\t\t\treturn {\r\n\t\t\t\tfilters: [\r\n\t\t\t\t\t['Item Attribute', 'virtual', '=', 0]\r\n\t\t\t\t]\r\n\t\t\t};\r\n\t\t});\r\n\t\tcur_frm.set_query('attribute', 'item_variant_restrictions', function(){\r\n\t\t\tvar attrs = []\r\n\t\t\tcur_frm.doc.attributes.forEach(function(row){\r\n\t\t\t\tattrs.push(row.attribute)\r\n\t\t\t});\r\n\t\t\treturn {'filters': [['Item Attribute', 'name', 'in', attrs]]}\r\n\t\t});\r\n\t\t\r\n\t}\r\n}\r\n//Below code would disable the attribute table after being saved.\r\nfrappe.ui.form.on(\"Item\", \"refresh\", function(frm){\r\n    frm.fields_dict.attributes.grid.df.read_only = frm.doc.__islocal ? false: true;\r\n\tfrm.fields_dict.attributes.grid.docfields.forEach(function(field){\r\n\t\tfield.read_only = frm.doc.__islocal ? false: true;\r\n\t});\r\n    frm.refresh_field(\"attributes\");\r\n});\r\n\r\nfrappe.ui.form.on(\"Item Variant Restrictions\", \"form_render\", function(frm, cdt, cdn){\r\n\tvar field = cur_frm.fields_dict.item_variant_restrictions.grid.grid_rows_by_docname[cdn].fields_dict.allowed_values;\r\n\t$(field.input_area).addClass('ui-front');\r\n\tfield.$input.autocomplete({\r\n\t\tminChars: 0,\r\n\t\tminLength: 0,\r\n\t\tsource: function(request, response){\r\n\t\t\tfrappe.call({\r\n\t\t\t\tmethod: 'frappe.client.get_list',\r\n\t\t\t\targs: {\r\n\t\t\t\t\tdoctype: 'Item Attribute Value',\r\n\t\t\t\t\tfilters: [\r\n\t\t\t\t\t\t['parent', '=', field.doc.attribute],\r\n\t\t\t\t\t\t['attribute_value', 'like', request.term + '%']\r\n\t\t\t\t\t],\r\n\t\t\t\t\tfields: ['attribute_value']\r\n\t\t\t\t},\r\n\t\t\t\tcallback: function(res){\r\n\t\t\t\t\tresponse($.map(res.message, function(d){ return d.attribute_value;}));\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t},\r\n\t\tselect: function(event, ui){\r\n\t\t\tfield.$input.val(ui.item.value);\r\n\t\t\tfield.$input.trigger('change');\r\n\t\t}\r\n\t});\r\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Quotation", 
  "modified": "2016-04-08 17:32:58.890289", 
  "name": "Quotation-Client", 
  "script": "// add interaction\nfrappe.ui.form.on(\"Quotation\", \"refresh\", function(frm, doctype, name) {\n\n    cur_frm.add_custom_button(__('Add Meeting Details'), function() {\n        cur_frm.cscript.convert_to_group(); }, \"icon-exclamation\", \"btn-default\");\n\n\n    cur_frm.cscript.convert_to_group = function(doc, cdt, cdn) {\n        var d = new frappe.ui.Dialog({\n            title:__('Type of Interaction'),\n            fields: [\n                {label:__(\"Type of Interaction\"), fieldtype:\"Select\",'default': \"Call\",\n                                options: [\"Call\",\"Mail\",\"Face to Face\",\"SMS\",\"Skype\"],\n                                fieldname:\"type_of_interaction\"},\n                {label:__(\"Result\"), fieldtype:\"Select\", options: \n                [\"Status Quo\",\"Warmer\",\"Colder\",\"Closed Lost\",\"Closed Won\"], fieldname:\"result\"},\n                {'fieldname': 'responsible', 'fieldtype': 'Link', options:\"User\", 'default': user, 'label': 'Responsible', 'reqd': 0},\n                {fieldtype: \"Column Break\"},\n                {'fieldname': 'person_interacted_with', 'fieldtype': 'Data', 'label': 'Person Interacted with', 'reqd': 0},\n                {'fieldname': 'next_date', 'fieldtype': 'Date', \n                'label': 'Next Action Date', 'default': frappe.datetime.add_days(frappe.datetime.nowdate(),7), 'reqd': 0},\n                {'fieldname': 'next_action_by', 'fieldtype': 'Link', options:\"User\", 'default': user,'label': 'Next Action By', 'reqd': 0},\n                {fieldtype: \"Section Break\"},\n                {'fieldname': 'comment', 'fieldtype': 'Text', 'label': 'Next Action Task', 'reqd': 1},\n                {fieldtype: \"Section Break\", collapsible:true},\n                {'fieldname': 'is_expense', 'fieldtype': 'Check', 'label': 'Is Expense'},\n                {'fieldname': 'expense_type', 'fieldtype': 'Link', options:\"Expense Claim Type\", depends_on: 1,'label': 'Expense Claim Type', 'reqd': 0},\n                {'fieldname': 'claim_amount', 'fieldtype': 'Currency', 'label': 'Expense Amount', 'reqd': 0},   \n                {'fieldname': 'expense_date', 'fieldtype': 'Date', \n                'label': 'Expense Date', 'default': frappe.datetime.add_days(frappe.datetime.nowdate(),0), 'reqd': 1},\n                {fieldtype: \"Column Break\"},\n                {'fieldname': 'exp_approver', 'fieldtype': 'Link', options:\"User\", 'default': user,'label': 'Expense Approver', 'reqd': 0},\n                {'fieldname': 'description', 'fieldtype': 'Text', 'label': 'Description'},\n            ]\n        })\n        \n        var fd = d.fields_dict;\n                $(fd.expense_date.wrapper).toggle(false);\n                $(fd.expense_type.wrapper).toggle(false);\n                $(fd.claim_amount.wrapper).toggle(false);\n                $(fd.exp_approver.wrapper).toggle(false);\n                $(fd.description.wrapper).toggle(false);\n\n        // account type if ledger\n        $(fd.is_expense.input).change(function() {\n            console.log(\"in chage\");\n            if($(this).prop(\"checked\")) {\n                $(fd.expense_date.wrapper).toggle(true);\n                $(fd.expense_type.wrapper).toggle(true);\n                $(fd.claim_amount.wrapper).toggle(true);\n                $(fd.exp_approver.wrapper).toggle(true);\n                $(fd.description.wrapper).toggle(true);\n                fd.expense_date.$input.trigger(\"change\");\n                fd.expense_type.$input.trigger(\"change\");\n                fd.claim_amount.$input.trigger(\"change\");\n                fd.exp_approver.$input.trigger(\"change\");\n                fd.description.$input.trigger(\"change\");\n                d.fields_dict.claim_amount.df.reqd=1;\n                d.fields_dict.expense_type.df.reqd=1;\n                d.fields_dict.description.df.reqd=1;\n                d.fields_dict.claim_amount.refresh();\n                d.fields_dict.expense_type.refresh();\n                d.fields_dict.description.refresh();\n            } else {\n                $(fd.expense_date.wrapper).toggle(false);\n                $(fd.expense_type.wrapper).toggle(false);\n                $(fd.claim_amount.wrapper).toggle(false);\n                $(fd.exp_approver.wrapper).toggle(false);\n                $(fd.description.wrapper).toggle(false);\n                fd.expense_date.$input.trigger(\"change\");\n                fd.expense_type.$input.trigger(\"change\");\n                fd.claim_amount.$input.trigger(\"change\");\n                fd.exp_approver.$input.trigger(\"change\");\n                fd.description.$input.trigger(\"change\");\n                d.fields_dict.claim_amount.df.reqd=0;\n                d.fields_dict.expense_type.df.reqd=0;\n                d.fields_dict.description.df.reqd=0;\n                d.fields_dict.claim_amount.refresh();\n                d.fields_dict.expense_type.refresh();\n                d.fields_dict.description.refresh();\n\n            }\n        });\n\n        d.set_primary_action(__(\"Submit\"), function() {\n            d.hide();\n            var c = d.get_values()\n            var cmnt = \"<br> Person Interacted_With: \"+ c.person_interacted_with\n                           +\"<br>Type of Interaction: \"+ c.type_of_interaction\n                           +\"<br>Result: \"+ c.result \n                           +\"<br>Next Action Date: \" +c.next_date \n                           +\"<br>Next Action By: \"+ c.next_action_by \n                           + \"<br>Next Action Task: \"+c.comment \n                           + \"<br>Responsible: \"+c.responsible \n                    \n            var me = frm.doc\n            // start interaction master\n            if(c.is_expense){\n                    frappe.call({\n                        method: \"rigpl_erpnext.custom_method.custom_method.add_expense_claim\",\n                        args: {\n                            doc:{\n                                doctype: \"Expense Claim\",\n                                exp_approver: c.exp_approver,\n                                responsible: c.responsible,\n                                \"expenses\":[{\n                                    \"expense_type\": c.expense_type,\n                                    \"expense_date\": c.expense_date,\n                                    \"claim_amount\": c.claim_amount,\n                                    \"description\": c.description,\n                                }\n                                ],\n                            }\n                        },\n                        callback: function(r) {\n                                    msgprint(\"Expense Claim Created\");\n                        }\n                    });\n            }\n\n            //end interaction master\n            // create todo\n                if(1==1){\n                    frappe.call({\n                                    method: \"rigpl_erpnext.custom_method.custom_method.create_todo\",\n                                    args: {\n                                        owner: c.next_action_by,\n                                        assigned_by: c.responsible,\n                                        description: c.comment,\n                                        date: c.next_date,\n                                        reference_name: frm.doc.name,\n                                        reference_type: frm.doc.doctype\n                                    }\n                                })\n                }\n            // end of create todo\n            return frappe.call({\n                    method: \"frappe.desk.form.utils.add_comment\",\n                    args: {\n                        doc:{\n                            doctype: \"Communication\",\n                            communication_type: \"Comment\",\n                            reference_doctype: frm.doc.doctype,\n                            reference_name: frm.doc.name,\n                            comment: \"cmnt\",\n                            subject: \"cmnt\",\n                            content: cmnt,\n                            responce_reson: c.responce_reson,\n                            next_date: c.next_date,\n                            type_of_interaction: c.type_of_interaction,\n                            result: c.result,\n                            next_action_by: c.next_action_by,\n                            comment_by: user\n                        }\n                    },\n                    callback: function(r) {\n                                msgprint(\"Interaction Submited Successfully\");\n                                cur_frm.reload_doc();\n\n                    if (cur_frm) {\n                                if (cur_frm.docname && (frappe.last_edited_communication[cur_frm.doctype] || {})[cur_frm.docname]) {\n                                    delete frappe.last_edited_communication[cur_frm.doctype][cur_frm.docname];\n                                }\n                                // cur_frm.comments.input.val(\"\");\n                            }\n                    }\n                });\n\n\n        });\n\n        d.show();\n\n    }\n\n\n});\n\n\n", 
  "script_type": "Client"
 }
]