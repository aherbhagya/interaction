[
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Material Request", 
  "modified": "2018-02-12 11:18:38.234036", 
  "name": "Material Request-Client", 
  "script": "frappe.ui.form.on(\"Material Request\", \"refresh\", function(frm, doctype, name) {\ncur_frm.add_custom_button(__('BOM'), function(doc, cdt, cdn, cmnt) {\n  var d = frappe.prompt([\n  \t{\"fieldname\":\"bom\", \"fieldtype\":\"Link\", \"label\":__(\"BOM\"),\n\t\t\t\t\toptions:\"BOM\", reqd: 1, get_query: function(){\n\t\t\t\t\t\treturn {filters: { docstatus:1 }}\n\t\t\t\t\t}},\n\t\t\t\t{\"fieldname\":\"warehouse\", \"fieldtype\":\"Link\", \"label\":__(\"Warehouse\"),\n\t\t\t\t\toptions:\"Warehouse\", reqd: 1},\n\n\t\t\t\t\t{\"fieldname\":\"qty\", \"fieldtype\":\"Data\", \"label\":__(\"Qty\"),\n\t\t\t\t\toptions:\"Warehouse\"},\n\t\t\t\t{\"fieldname\":\"fetch_exploded\", \"fieldtype\":\"Check\",\n\t\t\t\t\t\"label\":__(\"Fetch exploded BOM (including sub-assemblies)\"), \"default\":1},\n\t\t\t\t{fieldname:\"fetch\", \"label\":__(\"Get Items from BOM\"), \"fieldtype\":\"Button\"}\n\t\t\n    \n  ],\n  d.get_input(\"fetch\").on(\"click\", function() {\n\t\t\tvar values = d.get_values();\n\t\t\tif(!values) return;\n\t\t\tvalues[\"company\"] = cur_frm.doc.company;\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"erpnext.manufacturing.doctype.bom.bom.get_bom_items\",\n\t\t\t\targs: values,\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif(!r.message) {\n\t\t\t\t\t\tfrappe.throw(__(\"BOM does not contain any stock item\"))\n\t\t\t\t\t} else {\n\t\t\t\t\t\terpnext.utils.remove_empty_first_row(cur_frm, \"items\");\n\t\t\t\t\t\t$.each(r.message, function(i, item) {\n\t\t\t\t\t\t\tvar d = frappe.model.add_child(cur_frm.doc, \"Material Request Item\", \"items\");\n\t\t\t\t\t\t\td.item_code = item.item_code;\n\t\t\t\t\t\t\td.item_name = item.item_name;\n\t\t\t\t\t\t\td.description = item.description;\n\t\t\t\t\t\t\td.warehouse = values.warehouse;\n\t\t\t\t\t\t\td.uom = item.stock_uom;\n\t\t\t\t\t\t\td.stock_uom = item.stock_uom;\n\t\t\t\t\t\t\td.conversion_factor = 1;\n\t\t\t\t\t\t\td.qty = item.qty;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\td.hide();\n\t\t\t\t\trefresh_field(\"items\");\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n'Get Items from BOM',\n\n)\n});\n\n}); ", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Employee", 
  "modified": "2018-01-30 20:13:23.088601", 
  "name": "Employee-Client", 
  "script": "\nfrappe.ui.form.on(\"Employee\", \"refresh\", function(frm, doctype, name) {\ncur_frm.add_custom_button(__('Add Expenses'), function(doc, cdt, cdn, cmnt) {\n  var d = frappe.prompt([\n    {label:__(\"Approval Status\"), fieldtype:\"Select\",\n                    options: [\"Draft\",\"Approved\",\"Rejected\"],\n                    fieldname:\"approval_status\"},\n    {'fieldname': 'exp_approver', 'fieldtype': 'Link', options:\"User\", 'label': 'Approver'},\n    {fieldtype: \"Section Break\" , collapsible:true},\n    {'fieldname': 'expense_date', 'fieldtype': 'Date', options:\"Expense Claim Detail\", 'label': 'Expense Date'},      \n    {'fieldname': 'expense_type', 'fieldtype': 'Link',  options:\"Expense Claim Type\", 'label': 'Expense Claim Type'},\n    {'fieldname': 'description', 'fieldtype': 'Text Editor', options:\"expense_type.description\", 'label': 'Description'},\n    {'fieldname': 'claim_amount', 'fieldtype': 'Currency', options:\"Company:company:default_currency\", 'label': 'Claim Amount'}, \n    {'fieldname': 'sanctioned_amount', 'fieldtype': 'Currency', options:\"Company:company:default_currency\", 'label': 'Sanctioned Amount'},\n    {fieldtype: \"Section Break\"},\n    {'fieldname': 'total_amount_reimbursed', 'fieldtype': 'Currency', options:\"Company:company:default_currency\", 'label': 'Total Amount Reimbursed'},\n    {'fieldname': 'project', 'fieldtype': 'Link', options:\"Project\", 'label': 'Project'},\n    {'fieldname': 'task', 'fieldtype': 'Link', options:\"Task\", 'label': 'Task'},\n    {'fieldname': 'employee', 'fieldtype': 'Link', options:\"Employee\", 'label': 'From Employee'},\n    {fieldtype: \"Column Break\"},\n    {'fieldname': 'remark', 'fieldtype': 'Small Text', 'label': 'Remark'},\n    {fieldtype: \"Section Break\"},\n    {'fieldname': 'company', 'fieldtype': 'Link', options:\"Company\", 'label': 'Company'},\n    {'fieldname': 'payable_account', 'fieldtype': 'Link', options:\"Account\", 'label': 'Payable Account'},\n    {'fieldname': 'cost_center', 'fieldtype': 'Link', options:\"Cost Center\", 'label': 'Cost Center'},\n    {fieldtype: \"Column Break\"},\n    {'fieldname': 'employee_advance', 'fieldtype': 'Link',  options:\"Employee Advance\", 'label': 'Employee Advance'},\n    // {label:__(\"Status\"), fieldtype:\"Select\",\n    //                 options: [\"Draft\",\"Paid\",\"Unpaid\",\"Rejected\",\"Submitted\",\"Cancelled\"],\n    //                 fieldname:\"status\"},\n  ],\nfunction(values){\n    var c = d.get_values()\n    var cmnt = \"Approval Status: \"+ c.approval_status\n               +\"<br>Approver: \"+ c.exp_approver\n               // +\"<br>Is Paid: \"+ c.is_paid \n               + \"<br>Expense Date: \"+c.expense_date \n               + \"<br>Expense Claim Type: \"+c.expense_type \n               + \"<br>Description: \"+c.description\n               + \"<br>Claim Amount: \"+c.claim_amount\n               + \"<br>Sanctioned Amount: \"+c.sanctioned_amount\n               + \"<br>Total Amount Reimbursed: \"+c.total_amount_reimbursed\n               + \"<br>Project: \"+c.project\n               + \"<br>Task: \"+c.task\n               + \"<br>From Employee: \"+c.employee\n               + \"<br>Remark: \"+c.remark\n               + \"<br>Company: \"+c.company\n               + \"<br>Payable Account: \"+c.payable_account\n               + \"<br>Cost Center: \"+c.cost_center\n               + \"<br>Employee Advance: \"+c.employee_advance\n               // + \"<br>Status: \"+c.status\n    var me = frm.doc\n        frappe.call({\n            method: \"interaction.custom_methods.add_expense\",\n            args: {\n                doc:{\n                    doctype: \"Expense Claim\",\n                    // reference_doctype: frm.doc.doctype,\n                    // reference_name: me.name,\n                    approval_status: c.approval_status,\n                    exp_approver: c.exp_approver,\n                    expense_date: c.expense_date,\n                    expense_type: c.expense_type,\n                    description: c.description,\n                    claim_amount: c.claim_amount,\n                    sanctioned_amount: c.sanctioned_amount,\n                    \"expenses\":[{\n                                \"expense_date\": c.expense_date,\n                                \"expense_type\": c.expense_type,\n                                \"description\": c.description,\n                                \"claim_amount\": c.claim_amount,\n                                \"sanctioned_amount\": c.sanctioned_amount,\n                                }\n                                ],\n                    total_amount_reimbursed: c.total_amount_reimbursed,\n                    project: c.project,\n                    task: c.task,\n                    employee: c.employee,\n                    remark: c.remark,\n                    company: c.company,\n                    payable_account: c.payable_account,\n                    cost_center: c.cost_center,\n                    // status: c.status,\n                    \"advances\":[{\n                                \"employee_advance\": c.employee_advance,\n                                \n                                }\n                                ],\n                }\n            },\n\n            callback: function(r) {\n                    frappe.msgprint(\"Expense record created\");\n        }\n        });\n    \n    },\n\n'Expense Claim',\n'Submit','Expense Claim', \"btn-default\"\n)\n});\n\n}); ", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Lead", 
  "modified": "2017-11-25 18:28:29.609626", 
  "name": "Lead-Client", 
  "script": "frappe.ui.form.on(\"Lead\", \"refresh\", function(frm, doctype, name) {\ncur_frm.add_custom_button(__('Add Interaction'), function() {\nvar d = frappe.prompt([\n    {'fieldname': 'person_interacted_with', 'fieldtype': 'Data', 'label': 'Person Interacted with', 'reqd': 0},   \n    {label:__(\"Type of Interaction\"), fieldtype:\"Select\",'default': \"Follow Up Call\",\n                    options: [\"Cold Call\",\"Follow Up Call\",\"Mail\",\"Cold Visit\",\"Follow Up Visit\",\"Existing Customer Visit\",\"SMS or Whatsapp\",\"Skype or Webex\"],\n                    fieldname:\"type_of_interaction\"},\n    {label:__(\"Result\"), fieldtype:\"Select\", options:\n    [\"Status Quo\",\"Warmer\",\"Colder\",\"Closed Lost\",\"Closed Won\"], fieldname:\"result\"},\n    {'fieldname': 'responsible', 'fieldtype': 'Link', options:\"User\", 'default': user, 'label': 'Responsible', 'reqd': 0},\n    {'fieldname': 'create_task', 'fieldtype': 'Check', 'default': true, 'label': 'Create Task'},\n    {fieldtype: \"Column Break\"},\n\n    {'fieldname': 'next_date', 'fieldtype': 'Date',\n    'label': 'Next Action Date', 'default': frappe.datetime.add_days(frappe.datetime.nowdate(),7), 'reqd': 0},\n    {'fieldname': 'next_action_by', 'fieldtype': 'Link', options:\"User\", 'default': user,'label': 'Next Action By', 'reqd': 0},\n    {'fieldname': 'comment', 'fieldtype': 'Text', 'label': 'Next Action Task', 'reqd': 1},\n    {fieldtype: \"Section Break\"},\n\n    {'fieldname': 'remarks', 'fieldtype': 'Text Editor', 'label': 'Remarks', 'reqd': 1}\n    {'fieldname': 'comment', 'fieldtype': 'Text', 'label': 'Next Action Task', 'reqd': 1},\n    {fieldtype: \"Section Break\", collapsible:true},\n    {'fieldname': 'is_expense', 'fieldtype': 'Check', 'label': 'Is Expense'},             \n    {'fieldname': 'expense_type', 'fieldtype': 'Link', options:\"Expense Claim Type\", depends_on: 1\n    ,'label': 'Expense Claim Type', 'reqd': 0},           \n    {'fieldname': 'claim_amount', 'fieldtype': 'Currency', 'label': 'Expense Amount', 'reqd': 0},\n    {'fieldname': 'expense_date', 'fieldtype': 'Date', 'label': 'Expense Date',\n    'default': frappe.datetime.add_days(frappe.datetime.nowdate(),0), 'reqd': 1},\n    {fieldtype: \"Column Break\"},               \n    {'fieldname': 'exp_approver', 'fieldtype': 'Link', options:\"User\",\n    'default': user,'label': 'Expense Approver', 'reqd': 0},\n    {'fieldname': 'description', 'fieldtype': 'Text', 'label': 'Description'},\n\n\n],\n                    var fd = d.fields_dict;\n                     $(fd.expense_date.wrapper).toggle(false);\n                     $(fd.expense_type.wrapper).toggle(false);               \n                     $(fd.claim_amount.wrapper).toggle(false);              \n                     $(fd.exp_approver.wrapper).toggle(false);               \n                     $(fd.description.wrapper).toggle(false);   \n                     // account type if ledger\\n       \n                     $(fd.is_expense.input).change(function() {           \n                        console.log(\"in chage\");          \n                        if($(this).prop(\"checked\")) {               \n                            $(fd.expense_date.wrapper).toggle(true);               \n                            $(fd.expense_type.wrapper).toggle(true);            \n                            $(fd.claim_amount.wrapper).toggle(true);              \n                            $(fd.exp_approver.wrapper).toggle(true);              \n                            $(fd.description.wrapper).toggle(true);               \n                            fd.expense_date.$input.trigger(\"change\");               \n                            fd.expense_type.$input.trigger(\"change\");              \n                            fd.claim_amount.$input.trigger(\"change\");               \n                            fd.exp_approver.$input.trigger(\"change\");               \n                            fd.description.$input.trigger(\"change\");               \n                            d.fields_dict.claim_amount.df.reqd=1;               \n                            d.fields_dict.expense_type.df.reqd=1;             \n                            d.fields_dict.description.df.reqd=1;            \n                            d.fields_dict.claim_amount.refresh();             \n                            d.fields_dict.expense_type.refresh();            \n                            d.fields_dict.description.refresh();\n                        }\n                        else {               \n                            $(fd.expense_date.wrapper).toggle(false);               \n                            $(fd.expense_type.wrapper).toggle(false);               \n                            $(fd.claim_amount.wrapper).toggle(false);               \n                            $(fd.exp_approver.wrapper).toggle(false);               \n                            $(fd.description.wrapper).toggle(false);               \n                            fd.expense_date.$input.trigger(\"change\");               \n                            fd.expense_type.$input.trigger(\"change\");               \n                            fd.claim_amount.$input.trigger(\"change\");               \n                            fd.exp_approver.$input.trigger(\"change\");               \n                            fd.description.$input.trigger(\"change\");               \n                            d.fields_dict.claim_amount.df.reqd=0;               \n                            d.fields_dict.expense_type.df.reqd=0;             \n                            d.fields_dict.description.df.reqd=0;              \n                            d.fields_dict.claim_amount.refresh();             \n                            d.fields_dict.expense_type.refresh();              \n                            d.fields_dict.description.refresh();          \n                        }          \n            });\nfunction(values){\n    var c = d.get_values()\n    var cmnt = \"Person Interacted with: \"+ c.person_interacted_with\n               +\"<br>Type of Interaction: \"+ c.type_of_interaction\n               +\"<br>Result: \"+ c.result\n               +\"<br>Next Action Date: \" +c.next_date\n               +\"<br>Next Action By: \"+ c.next_action_by\n               + \"<br>Next Action Task: \"+c.comment\n               + \"<br>Responsible: \"+c.responsible\n               + \"<br>Remarks: \"+c.remarks\n    var me = frm.doc           // start interaction master\\n          \n    if(c.is_expense){                   \n            frappe.call({                     \n                method: \"interaction.custom_methods.add_expense_claim\", \n                args: {                          \n                    doc:{                            \n                            doctype: \"Expense Claim\",                               \n                            exp_approver: c.exp_approver, \n                            responsible: c.responsible,\n                            \"expenses\":[{ \"expense_type\": c.expense_type,    \n                            \"expense_date\": c.expense_date,                                 \n                            \"claim_amount\": c.claim_amount,                                 \n                            \"description\": c.description,                              \n                            }],    \n                        }\n                    },                     \n                    callback: function(r) {      \n                        msgprint(\"Expense Claim Created\");            \n                    }         \n            });          \n    }\n        \n    var me = frm.doc\n    // start interaction master\n       frappe.call({\n            method: \"interaction.custom_methods.add_interaction\",\n            args: {\n                doc:{\n                    doctype: \"Interaction Master\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    result: c.result,\n                    person_interacted_with: c.person_interacted_with,\n\n     //                responce_reson: c.responce_reson,\n                    next_action_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    // result: c.result,\n                    next_action_by: c.next_action_by,\n                    next_action_task: c.comment,\n                    remakrs: c.remarks,\n                    responsible: c.responsible\n                    // next_date\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction master record created\");\n            }\n        });\n    //end interaction master\n//create todo\nconsole.log(c.create_task);\n    if(c.create_task==true){\n        frappe.call({\n                        method: \"interaction.custom_methods.create_todo\",\n                        args: {\n                            owner: c.next_action_by,\n                            assigned_by: c.responsible,\n                            description: c.comment,\n                            date: c.next_date,\n                            reference_name: frm.doc.name,\n                            reference_type: frm.doc.doctype\n                        }\n                    })\n    }\n//end of create todo\n\n    return frappe.call({\n            method: \"frappe.desk.form.utils.add_comment\",\n            args: {\n                doc:{\n                    doctype: \"Communication\",\n                    communication_type: \"Comment\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    comment: \"cmnt\",\n                    subject: \"cmnt\",\n                    content: cmnt,\n                    responce_reson: c.responce_reson,\n                    next_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    result: c.result,\n                    next_action_by: c.next_action_by,\n                    reference_owner: frm.doc.owner,\n                    comment_by: user,\n                    user: user,\n                    sender_full_name:user_fullname,\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction Submited Successfully\");\n                        cur_frm.reload_doc();\n            if (cur_frm) {\n                        if (cur_frm.docname && (frappe.last_edited_communication[cur_frm.doctype] || {})[cur_frm.docname]) {\n                            delete frappe.last_edited_communication[cur_frm.doctype][cur_frm.docname];\n                        }\n                    }\n            }\n        });\n},\n'Add Interaction',\n'Submit','Add Interaction', \"btn-default\"\n)\n});\n\n                        // frm.refresh();\n\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Opportunity", 
  "modified": "2017-04-20 09:21:03.532779", 
  "name": "Opportunity-Client", 
  "script": "\nfrappe.ui.form.on(\"Opportunity\", \"refresh\", function(frm, doctype, name) {\ncur_frm.add_custom_button(__('Add Interaction'), function() {\nvar d = frappe.prompt([\n    {'fieldname': 'person_interacted_with', 'fieldtype': 'Data', 'label': 'Person Interacted with', 'reqd': 0},    \n    {label:__(\"Type of Interaction\"), fieldtype:\"Select\",'default': \"Call\",\n                    options: [\"Email\",\"Call\",\"Follow Up Call\",\"Demo\",\"Email Contract\"],\n                    fieldname:\"type_of_interaction\"},\n    {label:__(\"Result\"), fieldtype:\"Select\", options: \n    [\"Status Quo\",\"Warmer\",\"Colder\",\"Closed Lost\",\"Closed Won\"], fieldname:\"result\"},\n    {'fieldname': 'responsible', 'fieldtype': 'Link', options:\"User\", 'default': user, 'label': 'Responsible', 'reqd': 0},\n    {'fieldname': 'create_task', 'fieldtype': 'Check', 'default': true, 'label': 'Create Task'},\n  \n\n    {fieldtype: \"Column Break\"},\n\n \n    {'fieldname': 'next_date', 'fieldtype': 'Date', \n    'label': 'Next Action Date', 'default': frappe.datetime.add_days(frappe.datetime.nowdate(),7), 'reqd': 0},\n    {'fieldname': 'next_action_by', 'fieldtype': 'Link', options:\"User\", 'default': user,'label': 'Next Action By', 'reqd': 0},\n    {'fieldname': 'comment', 'fieldtype': 'Text', 'label': 'Next Action Task', 'reqd': 1},\n    {fieldtype: \"Section Break\"},\n\n    {'fieldname': 'remark', 'fieldtype': 'Text Editor', 'label': 'Remarks', 'reqd': 1} \n\n\n],\nfunction(values){\n    var c = d.get_values()\n    var cmnt = \"Person Interacted with: \"+ c.person_interacted_with\n               +\"<br>Type of Interaction: \"+ c.type_of_interaction\n               +\"<br>Result: \"+ c.result \n               +\"<br>Next Action Date: \" +c.next_date \n               +\"<br>Next Action By: \"+ c.next_action_by \n               + \"<br>Next Action Task: \"+c.comment \n               + \"<br>Responsible: \"+c.responsible \n               + \"<br>Remarks: \"+c.remark \n\n                \n    var me = frm.doc\n    // start interaction master\n       frappe.call({\n            method: \"allyhomes.custom_method.add_interaction\",\n            args: {\n                doc:{\n                    doctype: \"Interaction Master\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    result: c.result,\n                    person_interacted_with: c.person_interacted_with,\n\n     //                responce_reson: c.responce_reson,\n                    next_action_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    // result: c.result,\n                    next_action_by: c.next_action_by,\n                    next_action_task: c.comment,\n                    remark: c.remark,\n                    responsible: c.responsible\n                    // next_date\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction master record created\");\n            }\n        });\n    //end interaction master\n//create todo\n    if(c.create_task==true){\n        frappe.call({\n                        method: \"allyhomes.custom_method.create_todo\",\n                        args: {\n                            owner: c.next_action_by,\n                            assigned_by: c.responsible,\n                            description: c.comment,\n                            date: c.next_date,\n                            reference_name: frm.doc.name,\n                            reference_type: frm.doc.doctype\n                        }\n                    })\n    }\n//end of create todo\n\n    return frappe.call({\n            method: \"frappe.desk.form.utils.add_comment\",\n            args: {\n                doc:{\n                    doctype: \"Communication\",\n                    communication_type: \"Comment\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    comment: \"cmnt\",\n                    subject: \"cmnt\",\n                    content: cmnt,\n                    responce_reson: c.responce_reson,\n                    next_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    result: c.result,\n                    next_action_by: c.next_action_by,\n                    reference_owner: frm.doc.owner,\n                    comment_by: user,\n                    user: user,\n                    sender_full_name:user_fullname,\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction Submited Successfully\");\n                        cur_frm.reload_doc();\n            if (cur_frm) {\n                        if (cur_frm.docname && (frappe.last_edited_communication[cur_frm.doctype] || {})[cur_frm.docname]) {\n                            delete frappe.last_edited_communication[cur_frm.doctype][cur_frm.docname];\n                        }\n                    }\n            }\n        });\n},\n'Add Interaction',\n'Submit','Add Interaction', \"btn-default\"\n)\n});\n\n                        // frm.refresh();\n\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Supplier", 
  "modified": "2017-04-20 09:20:24.352341", 
  "name": "Supplier-Client", 
  "script": "\nfrappe.ui.form.on(\"Supplier\", \"refresh\", function(frm, doctype, name) {\ncur_frm.add_custom_button(__('Add Interaction'), function() {\nvar d = frappe.prompt([\n    {'fieldname': 'person_interacted_with', 'fieldtype': 'Data', 'label': 'Person Interacted with', 'reqd': 0},    \n    {label:__(\"Type of Interaction\"), fieldtype:\"Select\",'default': \"Call\",\n                    options: [\"Email\",\"Call\",\"Follow Up Call\",\"Demo\",\"Email Contract\"],\n                    fieldname:\"type_of_interaction\"},\n    {label:__(\"Result\"), fieldtype:\"Select\", options: \n    [\"Status Quo\",\"Warmer\",\"Colder\",\"Closed Lost\",\"Closed Won\"], fieldname:\"result\"},\n    {'fieldname': 'responsible', 'fieldtype': 'Link', options:\"User\", 'default': user, 'label': 'Responsible', 'reqd': 0},\n    {'fieldname': 'create_task', 'fieldtype': 'Check', 'default': true, 'label': 'Create Task'},\n  \n\n    {fieldtype: \"Column Break\"},\n\n \n    {'fieldname': 'next_date', 'fieldtype': 'Date', \n    'label': 'Next Action Date', 'default': frappe.datetime.add_days(frappe.datetime.nowdate(),7), 'reqd': 0},\n    {'fieldname': 'next_action_by', 'fieldtype': 'Link', options:\"User\", 'default': user,'label': 'Next Action By', 'reqd': 0},\n    {'fieldname': 'comment', 'fieldtype': 'Text', 'label': 'Next Action Task', 'reqd': 1},\n    {fieldtype: \"Section Break\"},\n\n    {'fieldname': 'remark', 'fieldtype': 'Text Editor', 'label': 'Remarks', 'reqd': 1} \n\n\n],\nfunction(values){\n    var c = d.get_values()\n    var cmnt = \"Person Interacted with: \"+ c.person_interacted_with\n               +\"<br>Type of Interaction: \"+ c.type_of_interaction\n               +\"<br>Result: \"+ c.result \n               +\"<br>Next Action Date: \" +c.next_date \n               +\"<br>Next Action By: \"+ c.next_action_by \n               + \"<br>Next Action Task: \"+c.comment \n               + \"<br>Responsible: \"+c.responsible \n               + \"<br>Remarks: \"+c.remark \n\n                \n    var me = frm.doc\n    // start interaction master\n       frappe.call({\n            method: \"allyhomes.custom_method.add_interaction\",\n            args: {\n                doc:{\n                    doctype: \"Interaction Master\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    result: c.result,\n                    person_interacted_with: c.person_interacted_with,\n\n     //                responce_reson: c.responce_reson,\n                    next_action_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    // result: c.result,\n                    next_action_by: c.next_action_by,\n                    next_action_task: c.comment,\n                    remark: c.remark,\n                    responsible: c.responsible\n                    // next_date\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction master record created\");\n            }\n        });\n    //end interaction master\n//create todo\n    if(c.create_task==true){\n        frappe.call({\n                        method: \"allyhomes.custom_method.create_todo\",\n                        args: {\n                            owner: c.next_action_by,\n                            assigned_by: c.responsible,\n                            description: c.comment,\n                            date: c.next_date,\n                            reference_name: frm.doc.name,\n                            reference_type: frm.doc.doctype\n                        }\n                    })\n    }\n//end of create todo\n\n    return frappe.call({\n            method: \"frappe.desk.form.utils.add_comment\",\n            args: {\n                doc:{\n                    doctype: \"Communication\",\n                    communication_type: \"Comment\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    comment: \"cmnt\",\n                    subject: \"cmnt\",\n                    content: cmnt,\n                    responce_reson: c.responce_reson,\n                    next_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    result: c.result,\n                    next_action_by: c.next_action_by,\n                    reference_owner: frm.doc.owner,\n                    comment_by: user,\n                    user: user,\n                    sender_full_name:user_fullname,\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction Submited Successfully\");\n                        cur_frm.reload_doc();\n            if (cur_frm) {\n                        if (cur_frm.docname && (frappe.last_edited_communication[cur_frm.doctype] || {})[cur_frm.docname]) {\n                            delete frappe.last_edited_communication[cur_frm.doctype][cur_frm.docname];\n                        }\n                    }\n            }\n        });\n},\n'Add Interaction',\n'Submit','Add Interaction', \"btn-default\"\n)\n});\n\n                        // frm.refresh();\n\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Sales Invoice", 
  "modified": "2017-04-20 09:21:57.792355", 
  "name": "Sales Invoice-Client", 
  "script": "\nfrappe.ui.form.on(\"Sales Invoice\", \"refresh\", function(frm, doctype, name) {\ncur_frm.add_custom_button(__('Add Interaction'), function() {\nvar d = frappe.prompt([\n    {'fieldname': 'person_interacted_with', 'fieldtype': 'Data', 'label': 'Person Interacted with', 'reqd': 0},    \n    {label:__(\"Type of Interaction\"), fieldtype:\"Select\",'default': \"Call\",\n                    options: [\"Email\",\"Call\",\"Follow Up Call\",\"Demo\",\"Email Contract\"],\n                    fieldname:\"type_of_interaction\"},\n    {label:__(\"Result\"), fieldtype:\"Select\", options: \n    [\"Status Quo\",\"Warmer\",\"Colder\",\"Closed Lost\",\"Closed Won\"], fieldname:\"result\"},\n    {'fieldname': 'responsible', 'fieldtype': 'Link', options:\"User\", 'default': user, 'label': 'Responsible', 'reqd': 0},\n    {'fieldname': 'create_task', 'fieldtype': 'Check', 'default': true, 'label': 'Create Task'},\n  \n\n    {fieldtype: \"Column Break\"},\n\n \n    {'fieldname': 'next_date', 'fieldtype': 'Date', \n    'label': 'Next Action Date', 'default': frappe.datetime.add_days(frappe.datetime.nowdate(),7), 'reqd': 0},\n    {'fieldname': 'next_action_by', 'fieldtype': 'Link', options:\"User\", 'default': user,'label': 'Next Action By', 'reqd': 0},\n    {'fieldname': 'comment', 'fieldtype': 'Text', 'label': 'Next Action Task', 'reqd': 1},\n    {fieldtype: \"Section Break\"},\n\n    {'fieldname': 'remark', 'fieldtype': 'Text Editor', 'label': 'Remarks', 'reqd': 1} \n\n\n],\nfunction(values){\n    var c = d.get_values()\n    var cmnt = \"Person Interacted with: \"+ c.person_interacted_with\n               +\"<br>Type of Interaction: \"+ c.type_of_interaction\n               +\"<br>Result: \"+ c.result \n               +\"<br>Next Action Date: \" +c.next_date \n               +\"<br>Next Action By: \"+ c.next_action_by \n               + \"<br>Next Action Task: \"+c.comment \n               + \"<br>Responsible: \"+c.responsible \n               + \"<br>Remarks: \"+c.remark \n\n                \n    var me = frm.doc\n    // start interaction master\n       frappe.call({\n            method: \"allyhomes.custom_method.add_interaction\",\n            args: {\n                doc:{\n                    doctype: \"Interaction Master\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    result: c.result,\n                    person_interacted_with: c.person_interacted_with,\n\n     //                responce_reson: c.responce_reson,\n                    next_action_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    // result: c.result,\n                    next_action_by: c.next_action_by,\n                    next_action_task: c.comment,\n                    remark: c.remark,\n                    responsible: c.responsible\n                    // next_date\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction master record created\");\n            }\n        });\n    //end interaction master\n//create todo\n    if(c.create_task==true){\n        frappe.call({\n                        method: \"allyhomes.custom_method.create_todo\",\n                        args: {\n                            owner: c.next_action_by,\n                            assigned_by: c.responsible,\n                            description: c.comment,\n                            date: c.next_date,\n                            reference_name: frm.doc.name,\n                            reference_type: frm.doc.doctype\n                        }\n                    })\n    }\n//end of create todo\n\n    return frappe.call({\n            method: \"frappe.desk.form.utils.add_comment\",\n            args: {\n                doc:{\n                    doctype: \"Communication\",\n                    communication_type: \"Comment\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    comment: \"cmnt\",\n                    subject: \"cmnt\",\n                    content: cmnt,\n                    responce_reson: c.responce_reson,\n                    next_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    result: c.result,\n                    next_action_by: c.next_action_by,\n                    reference_owner: frm.doc.owner,\n                    comment_by: user,\n                    user: user,\n                    sender_full_name:user_fullname,\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction Submited Successfully\");\n                        cur_frm.reload_doc();\n            if (cur_frm) {\n                        if (cur_frm.docname && (frappe.last_edited_communication[cur_frm.doctype] || {})[cur_frm.docname]) {\n                            delete frappe.last_edited_communication[cur_frm.doctype][cur_frm.docname];\n                        }\n                    }\n            }\n        });\n},\n'Add Interaction',\n'Submit','Add Interaction', \"btn-default\"\n)\n});\n\n                        // frm.refresh();\n\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Delivery Note", 
  "modified": "2017-04-20 09:22:26.233926", 
  "name": "Delivery Note-Client", 
  "script": "\nfrappe.ui.form.on(\"Delivery Note\", \"refresh\", function(frm, doctype, name) {\ncur_frm.add_custom_button(__('Add Interaction'), function() {\nvar d = frappe.prompt([\n    {'fieldname': 'person_interacted_with', 'fieldtype': 'Data', 'label': 'Person Interacted with', 'reqd': 0},    \n    {label:__(\"Type of Interaction\"), fieldtype:\"Select\",'default': \"Call\",\n                    options: [\"Email\",\"Call\",\"Follow Up Call\",\"Demo\",\"Email Contract\"],\n                    fieldname:\"type_of_interaction\"},\n    {label:__(\"Result\"), fieldtype:\"Select\", options: \n    [\"Status Quo\",\"Warmer\",\"Colder\",\"Closed Lost\",\"Closed Won\"], fieldname:\"result\"},\n    {'fieldname': 'responsible', 'fieldtype': 'Link', options:\"User\", 'default': user, 'label': 'Responsible', 'reqd': 0},\n    {'fieldname': 'create_task', 'fieldtype': 'Check', 'default': true, 'label': 'Create Task'},\n  \n\n    {fieldtype: \"Column Break\"},\n\n \n    {'fieldname': 'next_date', 'fieldtype': 'Date', \n    'label': 'Next Action Date', 'default': frappe.datetime.add_days(frappe.datetime.nowdate(),7), 'reqd': 0},\n    {'fieldname': 'next_action_by', 'fieldtype': 'Link', options:\"User\", 'default': user,'label': 'Next Action By', 'reqd': 0},\n    {'fieldname': 'comment', 'fieldtype': 'Text', 'label': 'Next Action Task', 'reqd': 1},\n    {fieldtype: \"Section Break\"},\n\n    {'fieldname': 'remark', 'fieldtype': 'Text Editor', 'label': 'Remarks', 'reqd': 1} \n\n\n],\nfunction(values){\n    var c = d.get_values()\n    var cmnt = \"Person Interacted with: \"+ c.person_interacted_with\n               +\"<br>Type of Interaction: \"+ c.type_of_interaction\n               +\"<br>Result: \"+ c.result \n               +\"<br>Next Action Date: \" +c.next_date \n               +\"<br>Next Action By: \"+ c.next_action_by \n               + \"<br>Next Action Task: \"+c.comment \n               + \"<br>Responsible: \"+c.responsible \n               + \"<br>Remarks: \"+c.remark \n\n                \n    var me = frm.doc\n    // start interaction master\n       frappe.call({\n            method: \"allyhomes.custom_method.add_interaction\",\n            args: {\n                doc:{\n                    doctype: \"Interaction Master\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    result: c.result,\n                    person_interacted_with: c.person_interacted_with,\n\n     //                responce_reson: c.responce_reson,\n                    next_action_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    // result: c.result,\n                    next_action_by: c.next_action_by,\n                    next_action_task: c.comment,\n                    remark: c.remark,\n                    responsible: c.responsible\n                    // next_date\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction master record created\");\n            }\n        });\n    //end interaction master\n//create todo\n    if(c.create_task==true){\n        frappe.call({\n                        method: \"allyhomes.custom_method.create_todo\",\n                        args: {\n                            owner: c.next_action_by,\n                            assigned_by: c.responsible,\n                            description: c.comment,\n                            date: c.next_date,\n                            reference_name: frm.doc.name,\n                            reference_type: frm.doc.doctype\n                        }\n                    })\n    }\n//end of create todo\n\n    return frappe.call({\n            method: \"frappe.desk.form.utils.add_comment\",\n            args: {\n                doc:{\n                    doctype: \"Communication\",\n                    communication_type: \"Comment\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    comment: \"cmnt\",\n                    subject: \"cmnt\",\n                    content: cmnt,\n                    responce_reson: c.responce_reson,\n                    next_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    result: c.result,\n                    next_action_by: c.next_action_by,\n                    reference_owner: frm.doc.owner,\n                    comment_by: user,\n                    user: user,\n                    sender_full_name:user_fullname,\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction Submited Successfully\");\n                        cur_frm.reload_doc();\n            if (cur_frm) {\n                        if (cur_frm.docname && (frappe.last_edited_communication[cur_frm.doctype] || {})[cur_frm.docname]) {\n                            delete frappe.last_edited_communication[cur_frm.doctype][cur_frm.docname];\n                        }\n                    }\n            }\n        });\n},\n'Add Interaction',\n'Submit','Add Interaction', \"btn-default\"\n)\n});\n\n                        // frm.refresh();\n\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Purchase Order", 
  "modified": "2017-04-20 09:22:46.543599", 
  "name": "Purchase Order-Client", 
  "script": "\nfrappe.ui.form.on(\"Purchase Order\", \"refresh\", function(frm, doctype, name) {\ncur_frm.add_custom_button(__('Add Interaction'), function() {\nvar d = frappe.prompt([\n    {'fieldname': 'person_interacted_with', 'fieldtype': 'Data', 'label': 'Person Interacted with', 'reqd': 0},    \n    {label:__(\"Type of Interaction\"), fieldtype:\"Select\",'default': \"Call\",\n                    options: [\"Email\",\"Call\",\"Follow Up Call\",\"Demo\",\"Email Contract\"],\n                    fieldname:\"type_of_interaction\"},\n    {label:__(\"Result\"), fieldtype:\"Select\", options: \n    [\"Status Quo\",\"Warmer\",\"Colder\",\"Closed Lost\",\"Closed Won\"], fieldname:\"result\"},\n    {'fieldname': 'responsible', 'fieldtype': 'Link', options:\"User\", 'default': user, 'label': 'Responsible', 'reqd': 0},\n    {'fieldname': 'create_task', 'fieldtype': 'Check', 'default': true, 'label': 'Create Task'},\n  \n\n    {fieldtype: \"Column Break\"},\n\n \n    {'fieldname': 'next_date', 'fieldtype': 'Date', \n    'label': 'Next Action Date', 'default': frappe.datetime.add_days(frappe.datetime.nowdate(),7), 'reqd': 0},\n    {'fieldname': 'next_action_by', 'fieldtype': 'Link', options:\"User\", 'default': user,'label': 'Next Action By', 'reqd': 0},\n    {'fieldname': 'comment', 'fieldtype': 'Text', 'label': 'Next Action Task', 'reqd': 1},\n    {fieldtype: \"Section Break\"},\n\n    {'fieldname': 'remark', 'fieldtype': 'Text Editor', 'label': 'Remarks', 'reqd': 1} \n\n\n],\nfunction(values){\n    var c = d.get_values()\n    var cmnt = \"Person Interacted with: \"+ c.person_interacted_with\n               +\"<br>Type of Interaction: \"+ c.type_of_interaction\n               +\"<br>Result: \"+ c.result \n               +\"<br>Next Action Date: \" +c.next_date \n               +\"<br>Next Action By: \"+ c.next_action_by \n               + \"<br>Next Action Task: \"+c.comment \n               + \"<br>Responsible: \"+c.responsible \n               + \"<br>Remarks: \"+c.remark \n\n                \n    var me = frm.doc\n    // start interaction master\n       frappe.call({\n            method: \"allyhomes.custom_method.add_interaction\",\n            args: {\n                doc:{\n                    doctype: \"Interaction Master\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    result: c.result,\n                    person_interacted_with: c.person_interacted_with,\n\n     //                responce_reson: c.responce_reson,\n                    next_action_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    // result: c.result,\n                    next_action_by: c.next_action_by,\n                    next_action_task: c.comment,\n                    remark: c.remark,\n                    responsible: c.responsible\n                    // next_date\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction master record created\");\n            }\n        });\n    //end interaction master\n//create todo\n    if(c.create_task==true){\n        frappe.call({\n                        method: \"allyhomes.custom_method.create_todo\",\n                        args: {\n                            owner: c.next_action_by,\n                            assigned_by: c.responsible,\n                            description: c.comment,\n                            date: c.next_date,\n                            reference_name: frm.doc.name,\n                            reference_type: frm.doc.doctype\n                        }\n                    })\n    }\n//end of create todo\n\n    return frappe.call({\n            method: \"frappe.desk.form.utils.add_comment\",\n            args: {\n                doc:{\n                    doctype: \"Communication\",\n                    communication_type: \"Comment\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    comment: \"cmnt\",\n                    subject: \"cmnt\",\n                    content: cmnt,\n                    responce_reson: c.responce_reson,\n                    next_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    result: c.result,\n                    next_action_by: c.next_action_by,\n                    reference_owner: frm.doc.owner,\n                    comment_by: user,\n                    user: user,\n                    sender_full_name:user_fullname,\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction Submited Successfully\");\n                        cur_frm.reload_doc();\n            if (cur_frm) {\n                        if (cur_frm.docname && (frappe.last_edited_communication[cur_frm.doctype] || {})[cur_frm.docname]) {\n                            delete frappe.last_edited_communication[cur_frm.doctype][cur_frm.docname];\n                        }\n                    }\n            }\n        });\n},\n'Add Interaction',\n'Submit','Add Interaction', \"btn-default\"\n)\n});\n\n                        // frm.refresh();\n\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Purchase Invoice", 
  "modified": "2017-04-20 09:23:09.158838", 
  "name": "Purchase Invoice-Client", 
  "script": "\nfrappe.ui.form.on(\"Purchase Invoice\", \"refresh\", function(frm, doctype, name) {\ncur_frm.add_custom_button(__('Add Interaction'), function() {\nvar d = frappe.prompt([\n    {'fieldname': 'person_interacted_with', 'fieldtype': 'Data', 'label': 'Person Interacted with', 'reqd': 0},    \n    {label:__(\"Type of Interaction\"), fieldtype:\"Select\",'default': \"Call\",\n                    options: [\"Email\",\"Call\",\"Follow Up Call\",\"Demo\",\"Email Contract\"],\n                    fieldname:\"type_of_interaction\"},\n    {label:__(\"Result\"), fieldtype:\"Select\", options: \n    [\"Status Quo\",\"Warmer\",\"Colder\",\"Closed Lost\",\"Closed Won\"], fieldname:\"result\"},\n    {'fieldname': 'responsible', 'fieldtype': 'Link', options:\"User\", 'default': user, 'label': 'Responsible', 'reqd': 0},\n    {'fieldname': 'create_task', 'fieldtype': 'Check', 'default': true, 'label': 'Create Task'},\n  \n\n    {fieldtype: \"Column Break\"},\n\n \n    {'fieldname': 'next_date', 'fieldtype': 'Date', \n    'label': 'Next Action Date', 'default': frappe.datetime.add_days(frappe.datetime.nowdate(),7), 'reqd': 0},\n    {'fieldname': 'next_action_by', 'fieldtype': 'Link', options:\"User\", 'default': user,'label': 'Next Action By', 'reqd': 0},\n    {'fieldname': 'comment', 'fieldtype': 'Text', 'label': 'Next Action Task', 'reqd': 1},\n    {fieldtype: \"Section Break\"},\n\n    {'fieldname': 'remark', 'fieldtype': 'Text Editor', 'label': 'Remarks', 'reqd': 1} \n\n\n],\nfunction(values){\n    var c = d.get_values()\n    var cmnt = \"Person Interacted with: \"+ c.person_interacted_with\n               +\"<br>Type of Interaction: \"+ c.type_of_interaction\n               +\"<br>Result: \"+ c.result \n               +\"<br>Next Action Date: \" +c.next_date \n               +\"<br>Next Action By: \"+ c.next_action_by \n               + \"<br>Next Action Task: \"+c.comment \n               + \"<br>Responsible: \"+c.responsible \n               + \"<br>Remarks: \"+c.remark \n\n                \n    var me = frm.doc\n    // start interaction master\n       frappe.call({\n            method: \"allyhomes.custom_method.add_interaction\",\n            args: {\n                doc:{\n                    doctype: \"Interaction Master\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    result: c.result,\n                    person_interacted_with: c.person_interacted_with,\n\n     //                responce_reson: c.responce_reson,\n                    next_action_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    // result: c.result,\n                    next_action_by: c.next_action_by,\n                    next_action_task: c.comment,\n                    remark: c.remark,\n                    responsible: c.responsible\n                    // next_date\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction master record created\");\n            }\n        });\n    //end interaction master\n//create todo\n    if(c.create_task==true){\n        frappe.call({\n                        method: \"allyhomes.custom_method.create_todo\",\n                        args: {\n                            owner: c.next_action_by,\n                            assigned_by: c.responsible,\n                            description: c.comment,\n                            date: c.next_date,\n                            reference_name: frm.doc.name,\n                            reference_type: frm.doc.doctype\n                        }\n                    })\n    }\n//end of create todo\n\n    return frappe.call({\n            method: \"frappe.desk.form.utils.add_comment\",\n            args: {\n                doc:{\n                    doctype: \"Communication\",\n                    communication_type: \"Comment\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    comment: \"cmnt\",\n                    subject: \"cmnt\",\n                    content: cmnt,\n                    responce_reson: c.responce_reson,\n                    next_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    result: c.result,\n                    next_action_by: c.next_action_by,\n                    reference_owner: frm.doc.owner,\n                    comment_by: user,\n                    user: user,\n                    sender_full_name:user_fullname,\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction Submited Successfully\");\n                        cur_frm.reload_doc();\n            if (cur_frm) {\n                        if (cur_frm.docname && (frappe.last_edited_communication[cur_frm.doctype] || {})[cur_frm.docname]) {\n                            delete frappe.last_edited_communication[cur_frm.doctype][cur_frm.docname];\n                        }\n                    }\n            }\n        });\n},\n'Add Interaction',\n'Submit','Add Interaction', \"btn-default\"\n)\n});\n\n                        // frm.refresh();\n\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Customer", 
  "modified": "2017-11-03 12:55:51.785127", 
  "name": "Customer-Client", 
  "script": "frappe.ui.form.on(\"Customer\", \"refresh\", function(frm, doctype, name) {\ncur_frm.add_custom_button(__('Add Interaction'), function() {\nvar d = frappe.prompt([\n    {'fieldname': 'person_interacted_with', 'fieldtype': 'Data', 'label': 'Person Interacted with', 'reqd': 0},    \n    {label:__(\"Type of Interaction\"), fieldtype:\"Select\",'default': \"Follow Up Call\",\n                    options: [\"Cold Call\",\"Follow Up Call\",\"Mail\",\"Cold Visit\",\"Follow Up Visit\",\"Existing Customer Visit\",\"SMS or Whatsapp\",\"Skype or Webex\"],\n                    fieldname:\"type_of_interaction\"},\n    {label:__(\"Result\"), fieldtype:\"Select\", options: \n    [\"Status Quo\",\"Warmer\",\"Colder\",\"Closed Lost\",\"Closed Won\"], fieldname:\"result\"},\n    {'fieldname': 'responsible', 'fieldtype': 'Link', options:\"User\", 'default': user, 'label': 'Responsible', 'reqd': 0},\n    {'fieldname': 'create_task', 'fieldtype': 'Check', 'default': true, 'label': 'Create Task'},\n    {fieldtype: \"Column Break\"},\n\n    {'fieldname': 'next_date', 'fieldtype': 'Date', \n    'label': 'Next Action Date', 'default': frappe.datetime.add_days(frappe.datetime.nowdate(),7), 'reqd': 0},\n    {'fieldname': 'next_action_by', 'fieldtype': 'Link', options:\"User\", 'default': user,'label': 'Next Action By', 'reqd': 0},\n    {'fieldname': 'comment', 'fieldtype': 'Text', 'label': 'Next Action Task', 'reqd': 1},\n    {fieldtype: \"Section Break\"},\n\n    {'fieldname': 'remarks', 'fieldtype': 'Text Editor', 'label': 'Remarks', 'reqd': 1} \n\n\n],\nfunction(values){\n    var c = d.get_values()\n    var cmnt = \"Person Interacted with: \"+ c.person_interacted_with\n               +\"<br>Type of Interaction: \"+ c.type_of_interaction\n               +\"<br>Result: \"+ c.result \n               +\"<br>Next Action Date: \" +c.next_date \n               +\"<br>Next Action By: \"+ c.next_action_by \n               + \"<br>Next Action Task: \"+c.comment \n               + \"<br>Responsible: \"+c.responsible \n               + \"<br>Remarks: \"+c.remarks\n\n                \n    var me = frm.doc\n    // start interaction master\n       frappe.call({\n            method: \"shopchemical.custom_methods.add_interaction\",\n            args: {\n                doc:{\n                    doctype: \"Interaction Master\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    result: c.result,\n                    person_interacted_with: c.person_interacted_with,\n\n     //                responce_reson: c.responce_reson,\n                    next_action_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    // result: c.result,\n                    next_action_by: c.next_action_by,\n                    next_action_task: c.comment,\n                    remakrs: c.remarks,\n                    responsible: c.responsible\n                    // next_date\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction master record created\");\n            }\n        });\n    //end interaction master\n//create todo\nconsole.log(c.create_task);\n    if(c.create_task==true){\n        frappe.call({\n                        method: \"shopchemical.custom_methods.create_todo\",\n                        args: {\n                            owner: c.next_action_by,\n                            assigned_by: c.responsible,\n                            description: c.comment,\n                            date: c.next_date,\n                            reference_name: frm.doc.name,\n                            reference_type: frm.doc.doctype\n                        }\n                    })\n    }\n//end of create todo\n\n    return frappe.call({\n            method: \"frappe.desk.form.utils.add_comment\",\n            args: {\n                doc:{\n                    doctype: \"Communication\",\n                    communication_type: \"Comment\",\n                    reference_doctype: frm.doc.doctype,\n                    reference_name: frm.doc.name,\n                    comment: \"cmnt\",\n                    subject: \"cmnt\",\n                    content: cmnt,\n                    responce_reson: c.responce_reson,\n                    next_date: c.next_date,\n                    type_of_interaction: c.type_of_interaction,\n                    result: c.result,\n                    next_action_by: c.next_action_by,\n                    reference_owner: frm.doc.owner,\n                    comment_by: user,\n                    user: user,\n                    sender_full_name:user_fullname,\n                }\n            },\n            callback: function(r) {\n                        msgprint(\"Interaction Submited Successfully\");\n                        cur_frm.reload_doc();\n            if (cur_frm) {\n                        if (cur_frm.docname && (frappe.last_edited_communication[cur_frm.doctype] || {})[cur_frm.docname]) {\n                            delete frappe.last_edited_communication[cur_frm.doctype][cur_frm.docname];\n                        }\n                    }\n            }\n        });\n},\n'Add Interaction',\n'Submit','Add Interaction', \"btn-default\"\n)\n});\n\n                        // frm.refresh();\n\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Item", 
  "modified": "2018-02-12 12:16:24.149185", 
  "name": "Item-Client", 
  "script": "frappe.provide(\"erpnext.item\");\r\n\r\nfrappe.ui.form.on(\"Item\", {\r\n\trefresh: function(frm) {\r\n\t\tif (frm.doc.has_variants) {\r\n\t\t\tfrm.add_custom_button(__(\"Make New Item Code\"), function() {\r\n\t\t\t\terpnext.item.make_variant_custom()\r\n\t\t\t}, \"icon-list\", \"btn-default\");\r\n\t\t}\r\n\t},\r\n});\r\n\r\n$.extend(erpnext.item, {\r\n\tget_hidden_fields: function(){\r\n\t\tvar ret = {}, cur_attrs = [];\r\n\t\tcur_frm.doc.attributes.forEach(function(d){\r\n\t\t\tcur_attrs.push(d.attribute);\r\n\t\t});\r\n\t\tfrappe.call({\r\n\t\t\t'async': false,\r\n\t\t\t'method': 'frappe.client.get_list',\r\n\t\t\t'args': {\r\n\t\t\t\t'doctype': 'Item Attribute',\r\n\t\t\t\t'filters': [\r\n\t\t\t\t    ['Item Attribute', 'hidden', '=', 1],\r\n\t\t\t\t\t['Item Attribute', 'name', 'in', cur_attrs]\r\n\t\t\t\t],\r\n\t\t\t\tfields: [\r\n\t\t\t\t\t'name', 'update_from', 'source', 'relation'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t'callback': function(res){\r\n\t\t\t\t(res.message || []).forEach(function(r){\r\n\t\t\t\t\tvar only_allowed, options = [] ;\r\n\t\t\t\t\tif (!ret.hasOwnProperty(r.update_from)){\r\n\t\t\t\t\t\tret[r.update_from] = {};\r\n\t\t\t\t\t\tret[r.update_from]['source'] = r.source;\r\n\t\t\t\t\t\tret[r.update_from]['options'] = {}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tret[r.update_from][r.name] = r.relation;\r\n\t\t\t\t\tret[r.name] = r.update_from;\r\n\t\t\t\t\tonly_allowed = frappe.utils.filter_dict(cur_frm.doc.item_variant_restrictions, {\"attribute\": r.name});\r\n\t\t\t\t\t(only_allowed || []).forEach(function(d){\r\n\t\t\t\t\t\toptions.push(d.attribute)\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (!options.length){\r\n\t\t\t\t\t\tfrappe.call({\r\n\t\t\t\t\t\t\t'async': false,\r\n\t\t\t\t\t\t\t'method': 'frappe.client.get_list',\r\n\t\t\t\t\t\t\t'args': {\r\n\t\t\t\t\t\t\t\t'doctype': 'Item Attribute Value',\r\n\t\t\t\t\t\t\t\t'filters': [\r\n\t\t\t\t\t\t\t\t\t['Item Attribute Value', 'parent', '=', r.name]\r\n\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t'fields': ['attribute_value'],\r\n\t\t\t\t\t\t\t\t'limit_page_length': 500\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t'callback': function(res){\r\n\t\t\t\t\t\t\t\t(res.message || []).forEach(function(r){\r\n\t\t\t\t\t\t\t\t\toptions.push(r.attribute_value);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tret[r.update_from]['options'][r.name] = options;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn ret;\r\n\t},\r\n\tget_conversion_factors: function(from_uom, to_uom){\r\n\t\tvar ret;\r\n\t\tfrappe.call({\r\n\t\t\t'async': false,\r\n\t\t\t'method': 'rigpl_erpnext.rigpl_erpnext.item.get_uom_factors',\r\n\t\t\t'args':{\r\n\t\t\t\t'from_uom': from_uom,\r\n\t\t\t\t'to_uom': to_uom\r\n\t\t\t},\r\n\t\t\t'callback': function(res){\r\n\t\t\t\tret = res.message;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn ret;\r\n\t},\r\n\tmake_variant_custom: function(doc) {\r\n\t\tvar fields = [], hidden_fields = this.get_hidden_fields(doc);\r\n\t\tfor(var i=0;i< cur_frm.doc.attributes.length;i++){\r\n\t\t\tvar row = cur_frm.doc.attributes[i],\r\n\t\t\t    field, creator;\r\n\t\t\tif (!hidden_fields.hasOwnProperty(row.attribute)){\r\n\t\t\t\tfield = {\r\n\t\t\t\t\t\"label\": (row.attribute + \" (\"+ row.field_name + \")\"),\r\n\t\t\t\t\t\"fieldname\": row.attribute,\r\n\t\t\t\t\t\"reqd\": 1,\r\n\t\t\t\t\t\"fieldtype\": row.numeric_values ? \"Float\": \"Select\",\r\n\t\t\t\t\t\"description\": row.numeric_values ?  \"Min Value: \"+ row.from_range +\" , Max Value: \"+ row.to_range +\", in Increments of: \"+ row.increment : \"\"\r\n\t\t\t\t}\r\n\t\t\t\tif (field.fieldtype==='Select') {\r\n\t\t\t\t\tvar filters = [\r\n\t\t\t\t\t\t\t['parent', '=', row.attribute],\r\n\t\t\t\t\t], allowed = [], options = [null];\r\n\t\t\t\t\tfrappe.utils.filter_dict(cur_frm.doc.item_variant_restrictions, {'attribute': row.attribute}).forEach(function(d){\r\n\t\t\t\t\t\tif (d.allowed_values) allowed.push(d.allowed_values);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (allowed.length){\r\n\t\t\t\t\t\toptions = options.concat(allowed);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfrappe.call({\r\n\t\t\t\t\t\t\t'method': 'frappe.client.get_list',\r\n\t\t\t\t\t\t\t'async': false,\r\n\t\t\t\t\t\t\t'args': {\r\n\t\t\t\t\t\t\t\t'doctype': 'Item Attribute Value',\r\n\t\t\t\t\t\t\t\t'filters': filters,\r\n\t\t\t\t\t\t\t\t'fields': ['attribute_value']\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t'callback': function(res){\r\n\t\t\t\t\t\t\t\tres.message.forEach(function(d){\r\n\t\t\t\t\t\t\t\t\toptions.push(d.attribute_value);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfield.options = options;\r\n\t\t\t\t\tfields.push(field)\r\n\t\t\t\t}\r\n\t\t\t} else if (!hidden_fields[hidden_fields[row.attribute]].created){\r\n\t\t\t\tcreator = hidden_fields[row.attribute];\r\n\t\t\t\tfield = {\r\n\t\t\t\t\t'label': (creator + \" (\"+ row.field_name + \")\"),\r\n\t\t\t\t\t'fieldname': creator,\r\n\t\t\t\t\t'reqd': 1,\r\n\t\t\t\t\t'fieldtype': 'Data',\r\n\t\t\t\t};\r\n\t\t\t\thidden_fields[creator].created = true;\r\n\t\t\t\tfields.push(field)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar d = new frappe.ui.Dialog({\r\n\t\t\ttitle: __(\"Make Variant Custom\"),\r\n\t\t\tfields: fields\r\n\t\t});\r\n\t\t\r\n\t\tObject.keys(d.fields_dict).forEach(function(fieldname){\r\n\t\t\tif (d.fields_dict[fieldname].df.fieldtype!=='Data') return;\r\n\t\t\t\r\n\t\t\tvar field = d.fields_dict[fieldname],\r\n\t\t\t\ttarget = field.$input.parent(),\r\n\t\t\t    options = $('<ul class=\"dropdown-menu\"></ul>');\r\n\t\t\t\r\n\t\t\tObject.keys(hidden_fields[fieldname]).forEach(function(key){\r\n\t\t\t\tif (in_list(['created', 'source', 'options'], key)) return;\r\n\t\t\t\t\r\n\t\t\t\tvar option = $(format('<li><a data-option=\"{0}\">{0}</a></li>', [hidden_fields[fieldname][key]]));\r\n\t\t\t\toption.find('a').on('click', function(evt){\r\n\t\t\t\t\tevt.preventDefault();\r\n\t\t\t\t\tvar text = options.parent().find('button').text();\r\n\t\t\t\t\tif (text === $(this).text()) return;\r\n\t\t\t\t\toptions.parent().find('button').text($(this).text());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (target.hasClass('ui-front')){\r\n\t\t\t\t\t\tfield.$input.autocomplete('destroy');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttarget.addClass('ui-front');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((hidden_fields[fieldname].options[key]||'').length){\r\n\t\t\t\t\t\tfield.$input.autocomplete({\r\n\t\t\t\t\t\t\tminChars: 0,\r\n\t\t\t\t\t\t\tminLength: 0,\r\n\t\t\t\t\t\t\tsource: hidden_fields[fieldname].options[key],\r\n\t\t\t\t\t\t\tselect: function(event, ui){\r\n\t\t\t\t\t\t\t\tfield.$input.val(ui.item.value);\r\n\t\t\t\t\t\t\t\tfield.$input.trigger('change');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\toptions.append(option);\r\n\t\t\t});\r\n\t\t\t\t\r\n\t\t\t$(format('<div class=\"input-group-btn\">\\\r\n\t\t\t\t <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" data-fieldname=\"{1}\" aria-expanded=\"false\">{0}<span class=\"caret\"></span></button>\\\r\n\t\t\t  </div>', __([hidden_fields[fieldname].source, fieldname]))).append(options).prependTo(target);\r\n\t\t\t\r\n\t\t\ttarget.addClass('input-group');\r\n\t\t\t\r\n\t\t\tfield.$input.on('change', function(evt){\r\n\t\t\t\tif (!field.$input.val().length) return;\r\n\t\t\t\tvar uom = options.parent().find('button').text();\r\n\t\t\t\tif (uom===hidden_fields[fieldname].source){\r\n\t\t\t\t\tfield.$input.val(\"\");\r\n\t\t\t\t\tfrappe.throw(format('Select the \"{0}\" of the field \"{1}\"\", first!', [hidden_fields[fieldname].source, fieldname]))\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\td.set_primary_action(__(\"Make\"), function() {\r\n\t\t\tvar rules = {},\r\n\t\t\targs = d.get_values();\r\n\t\t\tif(!args) return;\r\n\t\t\t\r\n\t\t\tfrappe.utils.filter_dict(cur_frm.doc.item_variant_restrictions, {'is_numeric': 1}).forEach(function(d){\r\n\t\t\t\tif (!rules.hasOwnProperty(d.attribute)) rules[d.attribute] = [];\r\n\t\t\t\trules[d.attribute].push(d.rule);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tObject.keys(args).filter(function(key){ return hidden_fields.hasOwnProperty(key); }).forEach(function(key){\r\n\t\t\t\tvar val = args[key], base, targets = Object.keys(hidden_fields[key]).filter(function(k){ return !in_list(['created', 'source', 'options'], k)});\r\n\t\t\t\ttry {\r\n\t\t\t\t\tbase = eval(val);\r\n\t\t\t\t} catch( e ){\r\n\t\t\t\t\tfrappe.throw(format('Failed to decode the value \"{0}\"', [val]));\r\n\t\t\t\t}\r\n\t\t\t\ttargets.forEach(function(tgt){\r\n\t\t\t\t\tvar uom = d.fields_dict[key].$input.parent().find('button').text(),\r\n\t\t\t\t\t\ttgt_uom = hidden_fields[key][tgt],\r\n\t\t\t\t\t    factors = erpnext.item.get_conversion_factors(uom, tgt_uom);\r\n\t\t\t\t\tif (uom === tgt_uom) {\r\n\t\t\t\t\t\targs[tgt] = val.indexOf('/') === -1 ? flt(val) : val;\r\n\t\t\t\t\t} else if (factors.rgt){\r\n\t\t\t\t\t\targs[tgt] = flt((base * factors.rgt).toFixed(frappe.defaults.get_global_default('float_precision')));\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t    delete args[key];\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconsole.table(Object.keys(args).map(function(k){ return {'key': k, 'value': args[k]}}));\r\n\t\t\t//debugger;\r\n\t\t\tObject.keys(args).forEach(function(attribute){\r\n\t\t\t\tif (!rules.hasOwnProperty(attribute)) return;\r\n\t\t\t\tvar msg = [];\r\n\t\t\t\tfor (var i=0, j=rules[attribute].length; i < j; i++){\r\n\t\t\t\t\twith (args){\r\n\t\t\t\t\t\tout = eval(rules[attribute][i]);\r\n\t\t\t\t\t\tif (!out){\r\n\t\t\t\t\t\t\tmsg.push(format('Unable for ensure the rule \"{1}\" for the field \"{0}\"', [attribute, rules[attribute][i]]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (msg.length){\r\n\t\t\t\t\tfrappe.throw(msg.join('<br>'))\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tObject.keys(args).forEach(function(attribute){ args[attribute] = args[attribute] + '';});\r\n\t\t\tfrappe.call({\r\n\t\t\t\tmethod:\"erpnext.controllers.item_variant.get_variant\",\r\n\t\t\t\targs: {\r\n\t\t\t\t\t\"template\": cur_frm.doc.name,\r\n\t\t\t\t\t\"args\": args\r\n\t\t\t\t},\r\n\t\t\t\tcallback: function(r) {\r\n\t\t\t\t\t// returns variant item\r\n\t\t\t\t\tif (r.message) {\r\n\t\t\t\t\t\tvar variant = r.message;\r\n\t\t\t\t\t\tvar msgprint_dialog = frappe.msgprint(__(\"Item Variant {0} already exists with same attributes\",\r\n\t\t\t\t\t\t\t[repl('<a href=\"#Form/Item/%(item_encoded)s\" class=\"strong variant-click\">%(item)s</a>', {\r\n\t\t\t\t\t\t\t\titem_encoded: encodeURIComponent(variant),\r\n\t\t\t\t\t\t\t\titem: variant\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t));\r\n\t\t\t\t\t\tmsgprint_dialog.hide_on_page_refresh = true;\r\n\t\t\t\t\t\tmsgprint_dialog.$wrapper.find(\".variant-click\").on(\"click\", function() {\r\n\t\t\t\t\t\t\td.hide();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\td.hide();\r\n\t\t\t\t\t\tfrappe.call({\r\n\t\t\t\t\t\t\tmethod:\"erpnext.controllers.item_variant.create_variant\",\r\n\t\t\t\t\t\t\targs: {\r\n\t\t\t\t\t\t\t\t\"item\": cur_frm.doc.name,\r\n\t\t\t\t\t\t\t\t\"args\": args\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tcallback: function(r) {\r\n\t\t\t\t\t\t\t\tvar doclist = frappe.model.sync(r.message);\r\n\t\t\t\t\t\t\t\tfrappe.set_route(\"Form\", doclist[0].doctype, doclist[0].name);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\td.show();\r\n\t},\r\n\ttoggle_attributes: function(frm) {\r\n\t\tfrm.toggle_display(\"attributes\", frm.doc.has_variants || frm.doc.variant_of);\r\n\t\tfrm.fields_dict.attributes.grid.toggle_reqd(\"attribute_value\", frm.doc.variant_of ? 1 : 0);\r\n\t\tfrm.fields_dict.attributes.grid.set_column_disp(\"attribute_value\", frm.doc.variant_of ? 1 : 0);\r\n\t}\r\n});\r\n\r\ncur_frm.cscript.custom_onload = function () {\r\n\tif (cur_frm.doc.has_variants == 1) {\r\n\t\tcur_frm.set_query('attribute', 'attributes', function(){\r\n\t\t\treturn {\r\n\t\t\t\tfilters: [\r\n\t\t\t\t\t['Item Attribute', 'virtual', '=', 0]\r\n\t\t\t\t]\r\n\t\t\t};\r\n\t\t});\r\n\t\tcur_frm.set_query('attribute', 'item_variant_restrictions', function(){\r\n\t\t\tvar attrs = []\r\n\t\t\tcur_frm.doc.attributes.forEach(function(row){\r\n\t\t\t\tattrs.push(row.attribute)\r\n\t\t\t});\r\n\t\t\treturn {'filters': [['Item Attribute', 'name', 'in', attrs]]}\r\n\t\t});\r\n\t\t\r\n\t}\r\n}\r\n//Below code would disable the attribute table after being saved.\r\nfrappe.ui.form.on(\"Item\", \"refresh\", function(frm){\r\n    frm.fields_dict.attributes.grid.df.read_only = frm.doc.__islocal ? false: true;\r\n\tfrm.fields_dict.attributes.grid.docfields.forEach(function(field){\r\n\t\tfield.read_only = frm.doc.__islocal ? false: true;\r\n\t});\r\n    frm.refresh_field(\"attributes\");\r\n});\r\n\r\nfrappe.ui.form.on(\"Item Variant Restrictions\", \"form_render\", function(frm, cdt, cdn){\r\n\tvar field = cur_frm.fields_dict.item_variant_restrictions.grid.grid_rows_by_docname[cdn].fields_dict.allowed_values;\r\n\t$(field.input_area).addClass('ui-front');\r\n\tfield.$input.autocomplete({\r\n\t\tminChars: 0,\r\n\t\tminLength: 0,\r\n\t\tsource: function(request, response){\r\n\t\t\tfrappe.call({\r\n\t\t\t\tmethod: 'frappe.client.get_list',\r\n\t\t\t\targs: {\r\n\t\t\t\t\tdoctype: 'Item Attribute Value',\r\n\t\t\t\t\tfilters: [\r\n\t\t\t\t\t\t['parent', '=', field.doc.attribute],\r\n\t\t\t\t\t\t['attribute_value', 'like', request.term + '%']\r\n\t\t\t\t\t],\r\n\t\t\t\t\tfields: ['attribute_value']\r\n\t\t\t\t},\r\n\t\t\t\tcallback: function(res){\r\n\t\t\t\t\tresponse($.map(res.message, function(d){ return d.attribute_value;}));\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t},\r\n\t\tselect: function(event, ui){\r\n\t\t\tfield.$input.val(ui.item.value);\r\n\t\t\tfield.$input.trigger('change');\r\n\t\t}\r\n\t});\r\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Quotation", 
  "modified": "2018-02-01 12:19:19.406608", 
  "name": "Quotation-Client", 
  "script": "\nfrappe.ui.form.on(\"Quotation\", \"refresh\", function(frm, doctype, name) {\ncur_frm.add_custom_button(__('Add Meeting Details'), function(doc, cdt, cdn, cmnt) {\n  var d = frappe.prompt([\n    {label:__(\"Type of Interaction\"), fieldtype:\"Select\",'default': \"Call\",\n                                options: [\"Call\",\"Mail\",\"Face to Face\",\"SMS\",\"Skype\"],\n                                fieldname:\"type_of_interaction\"},\n    {label:__(\"Result\"), fieldtype:\"Select\", options: \n                [\"Status Quo\",\"Warmer\",\"Colder\",\"Closed Lost\",\"Closed Won\"], fieldname:\"result\"},\n    {'fieldname': 'responsible', 'fieldtype': 'Link', options:\"User\", 'default': user, 'label': 'Responsible', 'reqd': 0},\n    {fieldtype: \"Column Break\"},\n    {'fieldname': 'person_interacted_with', 'fieldtype': 'Data', 'label': 'Person Interacted with', 'reqd': 0},\n    {'fieldname': 'next_date', 'fieldtype': 'Date', \n                'label': 'Next Action Date', 'default': frappe.datetime.add_days(frappe.datetime.nowdate(),7), 'reqd': 0},\n    {'fieldname': 'next_action_by', 'fieldtype': 'Link', options:\"User\", 'default': user,'label': 'Next Action By', 'reqd': 0},\n    {fieldtype: \"Section Break\"},\n    {'fieldname': 'comment', 'fieldtype': 'Text', 'label': 'Next Action Task', 'reqd': 1},\n    {fieldtype: \"Section Break\", collapsible:true},\n    {'fieldname': 'is_expense', 'fieldtype': 'Check', 'label': 'Is Expense'},            \n    {'fieldname': 'expense_type', 'fieldtype': 'Link', options:\"Expense Claim Type\",'label': 'Expense Claim Type', 'reqd': 0},\n    {'fieldname': 'claim_amount', 'fieldtype': 'Currency', 'label': 'Expense Amount', 'reqd': 0},   \n    {'fieldname': 'expense_date', 'fieldtype': 'Date', \n                'label': 'Expense Date', 'default': frappe.datetime.add_days(frappe.datetime.nowdate(),0), 'reqd': 1},\n    {fieldtype: \"Column Break\"},\n    {'fieldname': 'description', 'fieldtype': 'Text', 'label': 'Description'},  \n    {'fieldname': 'exp_approver', 'fieldtype': 'Link', options:\"User\", 'default': user,'label': 'Expense Approver', 'reqd': 0},                         \n    \n  ],\nfunction(values){\n    var c = d.get_values()\n    var cmnt = \"Type of Interaction: \"+ c.type_of_interaction\n               +\"<br>Result: \"+ c.result\n               +\"<br>Responsible: \"+c.responsible\n               +\"<br> Person Interacted_With: \"+ c.person_interacted_with\n               +\"<br>Next Action Date: \" +c.next_date \n               +\"<br>Next Action By: \"+ c.next_action_by \n               +\"<br>Next Action Task: \"+c.comment\n               +\"<br>Expense Claim Type: \"+c.expense_type\n               +\"<br>Expense Amount: \"+c.claim_amount\n               +\"<br>Expense Date: \"+c.expense_date\n               +\"<br>Description: \"+c.description \n               +\"<br>Expense Approver: \"+c.exp_approver\n\n    var me = frm.doc\n        frappe.call({\n            method: \"interaction.custom_methods.add_expense\",\n            args: {\n                doc:{\n                    doctype: \"Expense Claim\",\n                    // reference_doctype: frm.doc.doctype,\n                    // reference_name: me.name,\n                    // type_of_interaction: c.type_of_interaction,\n                    // result: c.result,\n                    // responsible: c.responsible,\n                    // person_interacted_with: c.person_interacted_with,\n                    // next_date: c.next_date,\n                    // next_action_by: c.next_action_by,\n                    // comment: c.comment,\n                   \n                    \"expenses\":[{\n                                    \"expense_type\": c.expense_type,\n                                    \"expense_date\": c.expense_date,\n                                    \"claim_amount\": c.claim_amount,\n                                    \"description\": c.description,\n                                }\n                                ],\n                     exp_approver: c.exp_approver,\n                   \n                }\n            },\n\n            callback: function(r) {\n                    frappe.msgprint(\"Expense Quotation record created\");\n        \n\n        }\n\n        });\n        //new code\n        // if(1==1){\n            frappe.call({\n                method: \"interaction.custom_methods.create_todo\",\n                    args: {\n                        owner: c.next_action_by,\n                        assigned_by: c.responsible,\n                        description: c.comment,\n                        date: c.next_date,\n                        reference_name: frm.doc.name,\n                        reference_type: frm.doc.doctype\n                    }\n            })\n        // }\n                    // end of create todo\n            return frappe.call({\n                    method: \"frappe.desk.form.utils.add_comment\",\n                    args: {\n                        doc:{\n                            doctype: \"Communication\",\n                            communication_type: \"Comment\",\n                            reference_doctype: frm.doc.doctype,\n                            reference_name: frm.doc.name,\n                            comment: \"cmnt\",\n                            subject: \"cmnt\",\n                            content: cmnt,\n                            responce_reson: c.responce_reson,\n                            next_date: c.next_date,\n                            type_of_interaction: c.type_of_interaction,\n                            result: c.result,\n                            next_action_by: c.next_action_by,\n                            comment_by: user\n                        }\n                    },\n                    callback: function(r) {\n                                msgprint(\"Interaction Submited Successfully\");\n                                cur_frm.reload_doc();\n\n                    if (cur_frm) {\n                                if (cur_frm.docname && (frappe.last_edited_communication[cur_frm.doctype] || {})[cur_frm.docname]) {\n                                    delete frappe.last_edited_communication[cur_frm.doctype][cur_frm.docname];\n                                }\n                                // cur_frm.comments.input.val(\"\");\n                            }\n                    }\n                });\n                //new code\n                \n\n    },\n    //functon\n\n\n'Type of Interaction',\n'Submit','Expense Claim', \"btn-default\"\n)\n});\n\n}); ", 
  "script_type": "Client"
 }
]